<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>libtonc: Data routines</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">libtonc
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Data routines<div class="ingroups"><a class="el" href="group__grpCore.htm">Core</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga8392caf15f889bb98a0053f1bfe39b32"><td class="memItemLeft" align="right" valign="top"><a id="ga8392caf15f889bb98a0053f1bfe39b32"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga8392caf15f889bb98a0053f1bfe39b32">countof</a>(_array)&#160;&#160;&#160;( sizeof(_array)/sizeof(_array[0]) )</td></tr>
<tr class="memdesc:ga8392caf15f889bb98a0053f1bfe39b32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of elements in an array. <br /></td></tr>
<tr class="separator:ga8392caf15f889bb98a0053f1bfe39b32"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gacdf972996a4ca01337da5c25824e5f2e"><td class="memItemLeft" align="right" valign="top"><a id="gacdf972996a4ca01337da5c25824e5f2e"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> uint&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gacdf972996a4ca01337da5c25824e5f2e">align</a> (uint x, uint width)</td></tr>
<tr class="memdesc:gacdf972996a4ca01337da5c25824e5f2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Align <em>x</em> to the next multiple of <em>width</em>. <br /></td></tr>
<tr class="separator:gacdf972996a4ca01337da5c25824e5f2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Copying and filling routines</h2></td></tr>
<tr class="memitem:ga63fd89462bc41ee9a450d8dd10d4fac5"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga63fd89462bc41ee9a450d8dd10d4fac5">tonccpy</a> (void *dst, const void *src, uint size)</td></tr>
<tr class="memdesc:ga63fd89462bc41ee9a450d8dd10d4fac5"><td class="mdescLeft">&#160;</td><td class="mdescRight">VRAM-safe cpy.  <a href="#ga63fd89462bc41ee9a450d8dd10d4fac5">More...</a><br /></td></tr>
<tr class="separator:ga63fd89462bc41ee9a450d8dd10d4fac5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5cd7eab7b8539ee1cd66232e7fc6f0c6"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga5cd7eab7b8539ee1cd66232e7fc6f0c6">__toncset</a> (void *dst, u32 fill, uint size)</td></tr>
<tr class="memdesc:ga5cd7eab7b8539ee1cd66232e7fc6f0c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">VRAM-safe memset, internal routine.  <a href="#ga5cd7eab7b8539ee1cd66232e7fc6f0c6">More...</a><br /></td></tr>
<tr class="separator:ga5cd7eab7b8539ee1cd66232e7fc6f0c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68a3d6abff4194d1debbd024b3059fc3"><td class="memItemLeft" align="right" valign="top"><a id="ga68a3d6abff4194d1debbd024b3059fc3"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga68a3d6abff4194d1debbd024b3059fc3">toncset</a> (void *dst, u8 src, uint count)</td></tr>
<tr class="memdesc:ga68a3d6abff4194d1debbd024b3059fc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">VRAM-safe memset, byte version. Size in bytes. <br /></td></tr>
<tr class="separator:ga68a3d6abff4194d1debbd024b3059fc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9adcd1bdc20c1e011a067a07650436fb"><td class="memItemLeft" align="right" valign="top"><a id="ga9adcd1bdc20c1e011a067a07650436fb"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga9adcd1bdc20c1e011a067a07650436fb">toncset16</a> (void *dst, u16 src, uint count)</td></tr>
<tr class="memdesc:ga9adcd1bdc20c1e011a067a07650436fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">VRAM-safe memset, halfword version. Size in hwords. <br /></td></tr>
<tr class="separator:ga9adcd1bdc20c1e011a067a07650436fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb43466c91f6a1e8c5754a77fd3024a2"><td class="memItemLeft" align="right" valign="top"><a id="gadb43466c91f6a1e8c5754a77fd3024a2"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gadb43466c91f6a1e8c5754a77fd3024a2">toncset32</a> (void *dst, u32 src, uint count)</td></tr>
<tr class="memdesc:gadb43466c91f6a1e8c5754a77fd3024a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">VRAM-safe memset, word version. Size in words. <br /></td></tr>
<tr class="separator:gadb43466c91f6a1e8c5754a77fd3024a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0be2fee65973531d77b37fce46294cd0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga0be2fee65973531d77b37fce46294cd0">memset16</a> (void *dst, u16 hw, uint hwcount)</td></tr>
<tr class="memdesc:ga0be2fee65973531d77b37fce46294cd0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fastfill for halfwords, analogous to memset()  <a href="#ga0be2fee65973531d77b37fce46294cd0">More...</a><br /></td></tr>
<tr class="separator:ga0be2fee65973531d77b37fce46294cd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga369c27871d42efe1bf61ac4e9e6192c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga369c27871d42efe1bf61ac4e9e6192c0">memcpy16</a> (void *dst, const void *src, uint hwcount)</td></tr>
<tr class="memdesc:ga369c27871d42efe1bf61ac4e9e6192c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy for halfwords.  <a href="#ga369c27871d42efe1bf61ac4e9e6192c0">More...</a><br /></td></tr>
<tr class="separator:ga369c27871d42efe1bf61ac4e9e6192c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79b00ab4b4cab447be9fed3b14e7fdfa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#gad95acfb589fdcfbf418e8b6a8de7a97f">IWRAM_CODE</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga79b00ab4b4cab447be9fed3b14e7fdfa">memset32</a> (void *dst, u32 wd, uint wdcount)</td></tr>
<tr class="memdesc:ga79b00ab4b4cab447be9fed3b14e7fdfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast-fill by words, analogous to memset()  <a href="#ga79b00ab4b4cab447be9fed3b14e7fdfa">More...</a><br /></td></tr>
<tr class="separator:ga79b00ab4b4cab447be9fed3b14e7fdfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5987b2da78cbae93641e818326c3b55e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#gad95acfb589fdcfbf418e8b6a8de7a97f">IWRAM_CODE</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga5987b2da78cbae93641e818326c3b55e">memcpy32</a> (void *dst, const void *src, uint wdcount)</td></tr>
<tr class="memdesc:ga5987b2da78cbae93641e818326c3b55e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast-copy by words.  <a href="#ga5987b2da78cbae93641e818326c3b55e">More...</a><br /></td></tr>
<tr class="separator:ga5987b2da78cbae93641e818326c3b55e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga38ee92b3067cfe67dfdb6e5b3f477558"><td class="memItemLeft" align="right" valign="top"><a id="ga38ee92b3067cfe67dfdb6e5b3f477558"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga38ee92b3067cfe67dfdb6e5b3f477558">GRIT_CPY</a>(dst,  name)&#160;&#160;&#160;<a class="el" href="group__grpData.htm#ga369c27871d42efe1bf61ac4e9e6192c0">memcpy16</a>(dst, name, name##Len/2)</td></tr>
<tr class="memdesc:ga38ee92b3067cfe67dfdb6e5b3f477558"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simplified copier for GRIT-exported data. <br /></td></tr>
<tr class="separator:ga38ee92b3067cfe67dfdb6e5b3f477558"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Repeated-value creators</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrp48f815e54566f3127a9cfcc5a8914245"></a>These function take a hex-value and duplicate it to all fields, like 0x88 -&gt; 0x88888888. </p>
</td></tr>
<tr class="memitem:ga4f001c899e36a8c9472ccbe5adda2d32"><td class="memItemLeft" align="right" valign="top"><a id="ga4f001c899e36a8c9472ccbe5adda2d32"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga4f001c899e36a8c9472ccbe5adda2d32">dup8</a> (u8 x)</td></tr>
<tr class="memdesc:ga4f001c899e36a8c9472ccbe5adda2d32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Duplicate a byte to form a halfword: 0x12 -&gt; 0x1212. <br /></td></tr>
<tr class="separator:ga4f001c899e36a8c9472ccbe5adda2d32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga410b282de0ebf70ef74bd1c688bb588f"><td class="memItemLeft" align="right" valign="top"><a id="ga410b282de0ebf70ef74bd1c688bb588f"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga410b282de0ebf70ef74bd1c688bb588f">dup16</a> (u16 x)</td></tr>
<tr class="memdesc:ga410b282de0ebf70ef74bd1c688bb588f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Duplicate a halfword to form a word: 0x1234 -&gt; 0x12341234. <br /></td></tr>
<tr class="separator:ga410b282de0ebf70ef74bd1c688bb588f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b3f7f02a73f46cc3746fd7972fb286a"><td class="memItemLeft" align="right" valign="top"><a id="ga4b3f7f02a73f46cc3746fd7972fb286a"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga4b3f7f02a73f46cc3746fd7972fb286a">quad8</a> (u8 x)</td></tr>
<tr class="memdesc:ga4b3f7f02a73f46cc3746fd7972fb286a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quadruple a byte to form a word: 0x12 -&gt; 0x12121212. <br /></td></tr>
<tr class="separator:ga4b3f7f02a73f46cc3746fd7972fb286a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa72bc748f74c4e698ae03cb30f5d1d61"><td class="memItemLeft" align="right" valign="top"><a id="gaa72bc748f74c4e698ae03cb30f5d1d61"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gaa72bc748f74c4e698ae03cb30f5d1d61">octup</a> (u8 x)</td></tr>
<tr class="memdesc:gaa72bc748f74c4e698ae03cb30f5d1d61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Octuple a nybble to form a word: 0x1 -&gt; 0x11111111. <br /></td></tr>
<tr class="separator:gaa72bc748f74c4e698ae03cb30f5d1d61"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Packing routines.</h2></td></tr>
<tr class="memitem:gaa900c584476b80cbd9df6108c8a8d1f8"><td class="memItemLeft" align="right" valign="top"><a id="gaa900c584476b80cbd9df6108c8a8d1f8"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gaa900c584476b80cbd9df6108c8a8d1f8">bytes2hword</a> (u8 b0, u8 b1)</td></tr>
<tr class="memdesc:gaa900c584476b80cbd9df6108c8a8d1f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pack 2 bytes into a word. Little-endian order. <br /></td></tr>
<tr class="separator:gaa900c584476b80cbd9df6108c8a8d1f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf46d9d06c96ba4f4bc992bf4d1af4b36"><td class="memItemLeft" align="right" valign="top"><a id="gaf46d9d06c96ba4f4bc992bf4d1af4b36"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gaf46d9d06c96ba4f4bc992bf4d1af4b36">bytes2word</a> (u8 b0, u8 b1, u8 b2, u8 b3)</td></tr>
<tr class="memdesc:gaf46d9d06c96ba4f4bc992bf4d1af4b36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pack 4 bytes into a word. Little-endian order. <br /></td></tr>
<tr class="separator:gaf46d9d06c96ba4f4bc992bf4d1af4b36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa5bc6af26ab0295d328e896d28f75dd6"><td class="memItemLeft" align="right" valign="top"><a id="gaa5bc6af26ab0295d328e896d28f75dd6"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gaa5bc6af26ab0295d328e896d28f75dd6">hword2word</a> (u16 h0, u16 h1)</td></tr>
<tr class="memdesc:gaa5bc6af26ab0295d328e896d28f75dd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pack 2 bytes into a word. Little-endian order. <br /></td></tr>
<tr class="separator:gaa5bc6af26ab0295d328e896d28f75dd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga5cd7eab7b8539ee1cd66232e7fc6f0c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5cd7eab7b8539ee1cd66232e7fc6f0c6">&#9670;&nbsp;</a></span>__toncset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* __toncset </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u32&#160;</td>
          <td class="paramname"><em>fill</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>VRAM-safe memset, internal routine. </p>
<p>This version mimics memset in functionality, with the benefit of working for VRAM as well. It is also slightly faster than the original memset. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>Destination pointer. </td></tr>
    <tr><td class="paramname">fill</td><td>Word to fill with. </td></tr>
    <tr><td class="paramname">size</td><td>Fill-length in bytes. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><em>dst</em>. </dd></dl>
<dl class="section note"><dt>Note</dt><dd>The <em>dst</em> pointer and <em>size</em> need not be word-aligned. In the case of unaligned fills, <em>fill</em> will be masked off to match the situation. </dd></dl>

<p class="reference">Referenced by <a class="el" href="group__grpData.htm#ga68a3d6abff4194d1debbd024b3059fc3">toncset()</a>, <a class="el" href="group__grpData.htm#ga9adcd1bdc20c1e011a067a07650436fb">toncset16()</a>, and <a class="el" href="group__grpData.htm#gadb43466c91f6a1e8c5754a77fd3024a2">toncset32()</a>.</p>

</div>
</div>
<a id="ga369c27871d42efe1bf61ac4e9e6192c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga369c27871d42efe1bf61ac4e9e6192c0">&#9670;&nbsp;</a></span>memcpy16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void memcpy16 </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>hwcount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy for halfwords. </p>
<p>Uses <code><a class="el" href="group__grpData.htm#ga5987b2da78cbae93641e818326c3b55e" title="Fast-copy by words. ">memcpy32()</a></code> if <em>hwn&gt;6</em> and <em>src</em> and <em>dst</em> are aligned equally. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>Destination address. </td></tr>
    <tr><td class="paramname">src</td><td>Source address. </td></tr>
    <tr><td class="paramname">hwcount</td><td>Number of halfwords to fill. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd><em>dst</em> and <em>src</em> <b>must</b> be halfword aligned. </dd>
<dd>
<em>r0</em> and <em>r1</em> return as <em>dst</em> + <em>hwcount*2</em> and <em>src</em> + <em>hwcount*2</em>. </dd></dl>

</div>
</div>
<a id="ga5987b2da78cbae93641e818326c3b55e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5987b2da78cbae93641e818326c3b55e">&#9670;&nbsp;</a></span>memcpy32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__grpTypeAttr.htm#gad95acfb589fdcfbf418e8b6a8de7a97f">IWRAM_CODE</a> void memcpy32 </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>wdcount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fast-copy by words. </p>
<p>Like <a class="el" href="group__grpBiosEx.htm#gaa95b96cdb87cc033120e9852507f6ca2" title="A fast word fill. ">CpuFastFill()</a>, only without the requirement of 32byte chunks </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>Destination address. </td></tr>
    <tr><td class="paramname">src</td><td>Source address. </td></tr>
    <tr><td class="paramname">wdcount</td><td>Number of words. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd><em>src</em> and <em>dst</em> <b>must</b> be word aligned. </dd>
<dd>
<em>r0</em> and <em>r1</em> return as <em>dst</em> + <em>wdcount*4</em> and <em>src</em> + <em>wdcount*4</em>. </dd></dl>

<p class="reference">Referenced by <a class="el" href="group__grpVideoObj.htm#ga29e55bb94a10cfea29b972d3fd4c9db9">oam_copy()</a>.</p>

</div>
</div>
<a id="ga0be2fee65973531d77b37fce46294cd0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0be2fee65973531d77b37fce46294cd0">&#9670;&nbsp;</a></span>memset16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void memset16 </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&#160;</td>
          <td class="paramname"><em>hw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>hwcount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fastfill for halfwords, analogous to memset() </p>
<p>Uses <code><a class="el" href="group__grpData.htm#ga79b00ab4b4cab447be9fed3b14e7fdfa" title="Fast-fill by words, analogous to memset() ">memset32()</a></code> if <em>hwcount&gt;5</em> </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>Destination address. </td></tr>
    <tr><td class="paramname">hw</td><td>Source halfword (not address). </td></tr>
    <tr><td class="paramname">hwcount</td><td>Number of halfwords to fill. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd><em>dst</em> <b>must</b> be halfword aligned. </dd>
<dd>
<em>r0</em> returns as <em>dst</em> + <em>hwcount*2</em>. </dd></dl>

<p class="reference">Referenced by <a class="el" href="group__grpVideoBmp.htm#ga835a637316d451be14c216e8a1424d3c">bmp16_frame()</a>, <a class="el" href="group__grpVideoBmp.htm#ga6f825d0c880961a1ba5df6205693572b">bmp16_hline()</a>, <a class="el" href="group__grpVideoBmp.htm#ga9f4450f64ce6912c7b91bba87021df0e">bmp16_rect()</a>, <a class="el" href="group__grpVideoBmp.htm#ga78a065b9b5c888261a0939ef7985524a">bmp8_hline()</a>, and <a class="el" href="group__grpVideoBmp.htm#ga3194d0a20ffc656a9bbbabcb37f753dc">bmp8_rect()</a>.</p>

</div>
</div>
<a id="ga79b00ab4b4cab447be9fed3b14e7fdfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga79b00ab4b4cab447be9fed3b14e7fdfa">&#9670;&nbsp;</a></span>memset32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__grpTypeAttr.htm#gad95acfb589fdcfbf418e8b6a8de7a97f">IWRAM_CODE</a> void memset32 </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u32&#160;</td>
          <td class="paramname"><em>wd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>wdcount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fast-fill by words, analogous to memset() </p>
<p>Like <a class="el" href="group__grpBiosMain.htm#ga22d048e5057f684114717297ce07b20e" title="A fast transfer via CPU in 32 byte chunks. ">CpuFastSet()</a>, only without the requirement of 32byte chunks and no awkward store-value-in-memory-first issue. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>Destination address. </td></tr>
    <tr><td class="paramname">wd</td><td>Fill word (not address). </td></tr>
    <tr><td class="paramname">wdcount</td><td>Number of words to fill. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd><em>dst</em> <b>must</b> be word aligned. </dd>
<dd>
<em>r0</em> returns as <em>dst</em> + <em>wdcount*4</em>. </dd></dl>

<p class="reference">Referenced by <a class="el" href="group__grpIrq.htm#ga8a7c8b812fe80f2d9ddc315962f91ad1">irq_init()</a>, <a class="el" href="group__grpVideoBmp.htm#ga60b393e5ec3a479e4f49f3d7e467620d">m3_fill()</a>, <a class="el" href="group__grpVideoBmp.htm#ga477b82b027d5cbc4fe68e2e27ab05114">m4_fill()</a>, <a class="el" href="group__grpVideoBmp.htm#ga28bbf0b65a01cfc5c6ca6ccd97ce3167">m5_fill()</a>, and <a class="el" href="group__grpVideoBg.htm#ga2125aa4286830ed213dc582e94734d26">se_fill()</a>.</p>

</div>
</div>
<a id="ga63fd89462bc41ee9a450d8dd10d4fac5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga63fd89462bc41ee9a450d8dd10d4fac5">&#9670;&nbsp;</a></span>tonccpy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* tonccpy </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>VRAM-safe cpy. </p>
<p>This version mimics memcpy in functionality, with the benefit of working for VRAM as well. It is also slightly faster than the original memcpy, but faster implementations can be made. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dst</td><td>Destination pointer. </td></tr>
    <tr><td class="paramname">src</td><td>Source pointer. </td></tr>
    <tr><td class="paramname">size</td><td>Fill-length in bytes. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><em>dst</em>. </dd></dl>
<dl class="section note"><dt>Note</dt><dd>The pointers and size need not be word-aligned. </dd></dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
