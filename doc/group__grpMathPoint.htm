<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>libtonc: Point functions</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">libtonc
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Point functions<div class="ingroups"><a class="el" href="group__grpMath.htm">Math</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structPOINT.htm">POINT</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">2D Point struct  <a href="structPOINT.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:gade97271734596e009b7b24277364db51"><td class="memItemLeft" align="right" valign="top"><a id="gade97271734596e009b7b24277364db51"></a>
typedef struct <a class="el" href="structPOINT.htm">POINT</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpMathPoint.htm#gade97271734596e009b7b24277364db51">POINT</a></td></tr>
<tr class="memdesc:gade97271734596e009b7b24277364db51"><td class="mdescLeft">&#160;</td><td class="mdescRight">2D Point struct <br /></td></tr>
<tr class="separator:gade97271734596e009b7b24277364db51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6b14deb2b6b210c12b9e3d6b9412db38"><td class="memItemLeft" align="right" valign="top"><a id="ga6b14deb2b6b210c12b9e3d6b9412db38"></a>
typedef struct <a class="el" href="structPOINT.htm">POINT</a>&#160;</td><td class="memItemRight" valign="bottom"><b>POINT32</b></td></tr>
<tr class="separator:ga6b14deb2b6b210c12b9e3d6b9412db38"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gad4d438992d0caa87a9ab1cf761dd5a85"><td class="memItemLeft" align="right" valign="top"><a id="gad4d438992d0caa87a9ab1cf761dd5a85"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> <a class="el" href="structPOINT.htm">POINT</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpMathPoint.htm#gad4d438992d0caa87a9ab1cf761dd5a85">pt_set</a> (<a class="el" href="structPOINT.htm">POINT</a> *pd, int x, int y)</td></tr>
<tr class="memdesc:gad4d438992d0caa87a9ab1cf761dd5a85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize <em>pd</em> to (<em>x</em>, <em>y</em>) <br /></td></tr>
<tr class="separator:gad4d438992d0caa87a9ab1cf761dd5a85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3693c11c7a9551f3ab9fc449501d1c42"><td class="memItemLeft" align="right" valign="top"><a id="ga3693c11c7a9551f3ab9fc449501d1c42"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> <a class="el" href="structPOINT.htm">POINT</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpMathPoint.htm#ga3693c11c7a9551f3ab9fc449501d1c42">pt_add</a> (<a class="el" href="structPOINT.htm">POINT</a> *pd, const <a class="el" href="structPOINT.htm">POINT</a> *pa, const <a class="el" href="structPOINT.htm">POINT</a> *pb)</td></tr>
<tr class="memdesc:ga3693c11c7a9551f3ab9fc449501d1c42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Point addition: <em>pd</em> = <em>pa</em> + <em>pb</em>. <br /></td></tr>
<tr class="separator:ga3693c11c7a9551f3ab9fc449501d1c42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d4709e0ed00c0edb54b029deeea9a7c"><td class="memItemLeft" align="right" valign="top"><a id="ga5d4709e0ed00c0edb54b029deeea9a7c"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> <a class="el" href="structPOINT.htm">POINT</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpMathPoint.htm#ga5d4709e0ed00c0edb54b029deeea9a7c">pt_sub</a> (<a class="el" href="structPOINT.htm">POINT</a> *pd, const <a class="el" href="structPOINT.htm">POINT</a> *pa, const <a class="el" href="structPOINT.htm">POINT</a> *pb)</td></tr>
<tr class="memdesc:ga5d4709e0ed00c0edb54b029deeea9a7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Point subtraction: <em>pd</em> = <em>pa</em> - <em>pb</em>. <br /></td></tr>
<tr class="separator:ga5d4709e0ed00c0edb54b029deeea9a7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga51e0a33e77776fb395efb87c80a44ef0"><td class="memItemLeft" align="right" valign="top"><a id="ga51e0a33e77776fb395efb87c80a44ef0"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> <a class="el" href="structPOINT.htm">POINT</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpMathPoint.htm#ga51e0a33e77776fb395efb87c80a44ef0">pt_scale</a> (<a class="el" href="structPOINT.htm">POINT</a> *pd, const <a class="el" href="structPOINT.htm">POINT</a> *pa, int c)</td></tr>
<tr class="memdesc:ga51e0a33e77776fb395efb87c80a44ef0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Point scale: <em>pd</em> = <em>c</em> * <em>pa</em>. <br /></td></tr>
<tr class="separator:ga51e0a33e77776fb395efb87c80a44ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3a452bc12bfec2e7a9b8444221b4190c"><td class="memItemLeft" align="right" valign="top"><a id="ga3a452bc12bfec2e7a9b8444221b4190c"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> <a class="el" href="structPOINT.htm">POINT</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpMathPoint.htm#ga3a452bc12bfec2e7a9b8444221b4190c">pt_add_eq</a> (<a class="el" href="structPOINT.htm">POINT</a> *pd, const <a class="el" href="structPOINT.htm">POINT</a> *pb)</td></tr>
<tr class="memdesc:ga3a452bc12bfec2e7a9b8444221b4190c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Point increment: <em>pd</em> += <em>pb</em>. <br /></td></tr>
<tr class="separator:ga3a452bc12bfec2e7a9b8444221b4190c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0375b2bb3bb78f66fff16695bfe3f713"><td class="memItemLeft" align="right" valign="top"><a id="ga0375b2bb3bb78f66fff16695bfe3f713"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> <a class="el" href="structPOINT.htm">POINT</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpMathPoint.htm#ga0375b2bb3bb78f66fff16695bfe3f713">pt_sub_eq</a> (<a class="el" href="structPOINT.htm">POINT</a> *pd, const <a class="el" href="structPOINT.htm">POINT</a> *pb)</td></tr>
<tr class="memdesc:ga0375b2bb3bb78f66fff16695bfe3f713"><td class="mdescLeft">&#160;</td><td class="mdescRight">Point decrement: <em>pd</em> -= <em>pb</em>. <br /></td></tr>
<tr class="separator:ga0375b2bb3bb78f66fff16695bfe3f713"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga082c27f789746bf2fb332ee2e964d218"><td class="memItemLeft" align="right" valign="top"><a id="ga082c27f789746bf2fb332ee2e964d218"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> <a class="el" href="structPOINT.htm">POINT</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpMathPoint.htm#ga082c27f789746bf2fb332ee2e964d218">pt_scale_eq</a> (<a class="el" href="structPOINT.htm">POINT</a> *pd, int c)</td></tr>
<tr class="memdesc:ga082c27f789746bf2fb332ee2e964d218"><td class="mdescLeft">&#160;</td><td class="mdescRight">Point scale: <em>pd</em> *= <em>c</em>. <br /></td></tr>
<tr class="separator:ga082c27f789746bf2fb332ee2e964d218"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac8e66ae8432440cbb9926c184f8906dc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpMathPoint.htm#gac8e66ae8432440cbb9926c184f8906dc">pt_cross</a> (const <a class="el" href="structPOINT.htm">POINT</a> *pa, const <a class="el" href="structPOINT.htm">POINT</a> *pb)</td></tr>
<tr class="memdesc:gac8e66ae8432440cbb9926c184f8906dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Point 'cross'-product: <em>pa &times; </em> <em>pb</em>.  <a href="#gac8e66ae8432440cbb9926c184f8906dc">More...</a><br /></td></tr>
<tr class="separator:gac8e66ae8432440cbb9926c184f8906dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3a296539364cef947677d3f135b4bbdc"><td class="memItemLeft" align="right" valign="top"><a id="ga3a296539364cef947677d3f135b4bbdc"></a>
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpMathPoint.htm#ga3a296539364cef947677d3f135b4bbdc">pt_dot</a> (const <a class="el" href="structPOINT.htm">POINT</a> *pa, const <a class="el" href="structPOINT.htm">POINT</a> *pb)</td></tr>
<tr class="memdesc:ga3a296539364cef947677d3f135b4bbdc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Point 'dot'-product:<em>pa &middot; </em> <em>pb</em>. <br /></td></tr>
<tr class="separator:ga3a296539364cef947677d3f135b4bbdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a039c4b0defd32c684b38051a9bf733"><td class="memItemLeft" align="right" valign="top"><a id="ga1a039c4b0defd32c684b38051a9bf733"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>pt_in_rect</b> (const <a class="el" href="structPOINT.htm">POINT</a> *pt, const struct <a class="el" href="structRECT.htm">RECT</a> *rc)</td></tr>
<tr class="separator:ga1a039c4b0defd32c684b38051a9bf733"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h2 class="groupheader">Function Documentation</h2>
<a id="gac8e66ae8432440cbb9926c184f8906dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac8e66ae8432440cbb9926c184f8906dc">&#9670;&nbsp;</a></span>pt_cross()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> int pt_cross </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structPOINT.htm">POINT</a> *&#160;</td>
          <td class="paramname"><em>pa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structPOINT.htm">POINT</a> *&#160;</td>
          <td class="paramname"><em>pb</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Point 'cross'-product: <em>pa &times; </em> <em>pb</em>. </p>
<p>Actually, there's no such thing as a 2D cross-product, but you could extend it to 3D and get the value of its <em>z</em>-component, which can be used for a test for parallelism. </p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
