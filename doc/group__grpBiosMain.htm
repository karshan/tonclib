<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>libtonc: BIOS functions</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">libtonc
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">BIOS functions<div class="ingroups"><a class="el" href="group__grpBios.htm">Bios Calls</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga6840abc273ea92ada252609ed3d24411"><td class="memItemLeft" align="right" valign="top"><a id="ga6840abc273ea92ada252609ed3d24411"></a>
u32&#160;</td><td class="memItemRight" valign="bottom"><b>BiosCheckSum</b> (void)</td></tr>
<tr class="separator:ga6840abc273ea92ada252609ed3d24411"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Reset functions</h2></td></tr>
<tr class="memitem:ga9ab2c6321c1a1d8fff8ceab680f9e1c4"><td class="memItemLeft" align="right" valign="top"><a id="ga9ab2c6321c1a1d8fff8ceab680f9e1c4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SoftReset</b> (void)</td></tr>
<tr class="separator:ga9ab2c6321c1a1d8fff8ceab680f9e1c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga01fcf3240d7e9160ca0e30c166e0b997"><td class="memItemLeft" align="right" valign="top"><a id="ga01fcf3240d7e9160ca0e30c166e0b997"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>RegisterRamReset</b> (u32 flags)</td></tr>
<tr class="separator:ga01fcf3240d7e9160ca0e30c166e0b997"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Halt functions</h2></td></tr>
<tr class="memitem:gab9837faa8c0cb3efdd3c2e0768d26864"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#gab9837faa8c0cb3efdd3c2e0768d26864">Halt</a> (void)</td></tr>
<tr class="memdesc:gab9837faa8c0cb3efdd3c2e0768d26864"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for the next VBlank (swi 05h).  <a href="#gab9837faa8c0cb3efdd3c2e0768d26864">More...</a><br /></td></tr>
<tr class="separator:gab9837faa8c0cb3efdd3c2e0768d26864"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga76c658dc5f4332e4b034419dca518c1c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#ga76c658dc5f4332e4b034419dca518c1c">Stop</a> (void)</td></tr>
<tr class="memdesc:ga76c658dc5f4332e4b034419dca518c1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for the next VBlank (swi 05h).  <a href="#ga76c658dc5f4332e4b034419dca518c1c">More...</a><br /></td></tr>
<tr class="separator:ga76c658dc5f4332e4b034419dca518c1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa43ede75af45be2a2e031e51a4ac1b36"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#gaa43ede75af45be2a2e031e51a4ac1b36">IntrWait</a> (u32 flagClear, u32 irq)</td></tr>
<tr class="memdesc:gaa43ede75af45be2a2e031e51a4ac1b36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for the next VBlank (swi 05h).  <a href="#gaa43ede75af45be2a2e031e51a4ac1b36">More...</a><br /></td></tr>
<tr class="separator:gaa43ede75af45be2a2e031e51a4ac1b36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4f52a2fe7daa9c32a797a2bf0ce54b64"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#ga4f52a2fe7daa9c32a797a2bf0ce54b64">VBlankIntrWait</a> (void)</td></tr>
<tr class="memdesc:ga4f52a2fe7daa9c32a797a2bf0ce54b64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for the next VBlank (swi 05h).  <a href="#ga4f52a2fe7daa9c32a797a2bf0ce54b64">More...</a><br /></td></tr>
<tr class="separator:ga4f52a2fe7daa9c32a797a2bf0ce54b64"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Math functions</h2></td></tr>
<tr class="memitem:ga56e2dea01a1b14ac08f1d84b7148868e"><td class="memItemLeft" align="right" valign="top">s32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#ga56e2dea01a1b14ac08f1d84b7148868e">Div</a> (s32 num, s32 den)</td></tr>
<tr class="memdesc:ga56e2dea01a1b14ac08f1d84b7148868e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic integer division (swi 06h).  <a href="#ga56e2dea01a1b14ac08f1d84b7148868e">More...</a><br /></td></tr>
<tr class="separator:ga56e2dea01a1b14ac08f1d84b7148868e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga901c5ca2399151687082037006e05ad1"><td class="memItemLeft" align="right" valign="top">s32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#ga901c5ca2399151687082037006e05ad1">DivArm</a> (s32 den, s32 num)</td></tr>
<tr class="memdesc:ga901c5ca2399151687082037006e05ad1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic integer division, but with switched arguments (swi 07h).  <a href="#ga901c5ca2399151687082037006e05ad1">More...</a><br /></td></tr>
<tr class="separator:ga901c5ca2399151687082037006e05ad1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaefbdef0249fb52b0f8a66f8da39e1d7e"><td class="memItemLeft" align="right" valign="top"><a id="gaefbdef0249fb52b0f8a66f8da39e1d7e"></a>
u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#gaefbdef0249fb52b0f8a66f8da39e1d7e">Sqrt</a> (u32 num)</td></tr>
<tr class="memdesc:gaefbdef0249fb52b0f8a66f8da39e1d7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Integer Square root (swi 08h). <br /></td></tr>
<tr class="separator:gaefbdef0249fb52b0f8a66f8da39e1d7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf277e136b8db1934f0f1d39b0a92f15f"><td class="memItemLeft" align="right" valign="top">s16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#gaf277e136b8db1934f0f1d39b0a92f15f">ArcTan</a> (s16 dydx)</td></tr>
<tr class="memdesc:gaf277e136b8db1934f0f1d39b0a92f15f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Arctangent of <em>dydx</em> (swi 08h)  <a href="#gaf277e136b8db1934f0f1d39b0a92f15f">More...</a><br /></td></tr>
<tr class="separator:gaf277e136b8db1934f0f1d39b0a92f15f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68aa0a256ec70725985b06e433dad5a9"><td class="memItemLeft" align="right" valign="top">s16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#ga68aa0a256ec70725985b06e433dad5a9">ArcTan2</a> (s16 x, s16 y)</td></tr>
<tr class="memdesc:ga68aa0a256ec70725985b06e433dad5a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Arctangent of a coordinate pair (swi 09h).  <a href="#ga68aa0a256ec70725985b06e433dad5a9">More...</a><br /></td></tr>
<tr class="separator:ga68aa0a256ec70725985b06e433dad5a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Memory copiers/fillers</h2></td></tr>
<tr class="memitem:gad98b7191f0c7925506eda2c307f8329f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#gad98b7191f0c7925506eda2c307f8329f">CpuSet</a> (const void *src, void *dst, u32 mode)</td></tr>
<tr class="memdesc:gad98b7191f0c7925506eda2c307f8329f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transfer via CPU in (half)word chunks.  <a href="#gad98b7191f0c7925506eda2c307f8329f">More...</a><br /></td></tr>
<tr class="separator:gad98b7191f0c7925506eda2c307f8329f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga22d048e5057f684114717297ce07b20e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#ga22d048e5057f684114717297ce07b20e">CpuFastSet</a> (const void *src, void *dst, u32 mode)</td></tr>
<tr class="memdesc:ga22d048e5057f684114717297ce07b20e"><td class="mdescLeft">&#160;</td><td class="mdescRight">A fast transfer via CPU in 32 byte chunks.  <a href="#ga22d048e5057f684114717297ce07b20e">More...</a><br /></td></tr>
<tr class="separator:ga22d048e5057f684114717297ce07b20e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Rot/scale functions</h2></td></tr>
<tr class="memitem:gabaf75c842ec0a6e31e5fc0fad9fe27a4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#gabaf75c842ec0a6e31e5fc0fad9fe27a4">ObjAffineSet</a> (const <a class="el" href="group__grpTypeSec.htm#gae68945366d768a5cbed2338280044461">ObjAffineSource</a> *src, void *dst, s32 num, s32 offset)</td></tr>
<tr class="memdesc:gabaf75c842ec0a6e31e5fc0fad9fe27a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets up a simple scale-then-rotate affine transformation (swi 0Eh).  <a href="#gabaf75c842ec0a6e31e5fc0fad9fe27a4">More...</a><br /></td></tr>
<tr class="separator:gabaf75c842ec0a6e31e5fc0fad9fe27a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1333931460fc0dcbcf167bbb95bfd20b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpBiosMain.htm#ga1333931460fc0dcbcf167bbb95bfd20b">BgAffineSet</a> (const <a class="el" href="group__grpTypeSec.htm#ga80211dd9fa87a2e69e337e4e07bf6ca3">BgAffineSource</a> *src, <a class="el" href="group__grpTypeSec.htm#gac73f1d4c3c88e67f3418f2c65ac3775b">BgAffineDest</a> *dst, s32 num)</td></tr>
<tr class="memdesc:ga1333931460fc0dcbcf167bbb95bfd20b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets up a simple scale-then-rotate affine transformation (swi 0Eh).  <a href="#ga1333931460fc0dcbcf167bbb95bfd20b">More...</a><br /></td></tr>
<tr class="separator:ga1333931460fc0dcbcf167bbb95bfd20b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Decompression (see GBATek for format details)</h2></td></tr>
<tr class="memitem:ga97ac2370800050d8c94473795aa7c9f3"><td class="memItemLeft" align="right" valign="top"><a id="ga97ac2370800050d8c94473795aa7c9f3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>BitUnPack</b> (const void *src, void *dst, const <a class="el" href="structBUP.htm">BUP</a> *bup)</td></tr>
<tr class="separator:ga97ac2370800050d8c94473795aa7c9f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6b23a6b85b64738f3c82f70668f3a050"><td class="memItemLeft" align="right" valign="top"><a id="ga6b23a6b85b64738f3c82f70668f3a050"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>LZ77UnCompWram</b> (const void *src, void *dst)</td></tr>
<tr class="separator:ga6b23a6b85b64738f3c82f70668f3a050"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacdbc35c817c701af5e5d276ed0371c76"><td class="memItemLeft" align="right" valign="top"><a id="gacdbc35c817c701af5e5d276ed0371c76"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>LZ77UnCompVram</b> (const void *src, void *dst)</td></tr>
<tr class="separator:gacdbc35c817c701af5e5d276ed0371c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c8c6acbfecf4d3b54b1573a11b9e7a2"><td class="memItemLeft" align="right" valign="top"><a id="ga9c8c6acbfecf4d3b54b1573a11b9e7a2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>HuffUnComp</b> (const void *src, void *dst)</td></tr>
<tr class="separator:ga9c8c6acbfecf4d3b54b1573a11b9e7a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadbda6e961530038cc1a9648687f8c711"><td class="memItemLeft" align="right" valign="top"><a id="gadbda6e961530038cc1a9648687f8c711"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>RLUnCompWram</b> (const void *src, void *dst)</td></tr>
<tr class="separator:gadbda6e961530038cc1a9648687f8c711"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae76c756343967eb53c9ebfaddee01619"><td class="memItemLeft" align="right" valign="top"><a id="gae76c756343967eb53c9ebfaddee01619"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>RLUnCompVram</b> (const void *src, void *dst)</td></tr>
<tr class="separator:gae76c756343967eb53c9ebfaddee01619"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga241f9979d6b3ad7d1c8477c61b12dd4c"><td class="memItemLeft" align="right" valign="top"><a id="ga241f9979d6b3ad7d1c8477c61b12dd4c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Diff8bitUnFilterWram</b> (const void *src, void *dst)</td></tr>
<tr class="separator:ga241f9979d6b3ad7d1c8477c61b12dd4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga232dfc48c58f0032addeed2075bd9649"><td class="memItemLeft" align="right" valign="top"><a id="ga232dfc48c58f0032addeed2075bd9649"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Diff8bitUnFilterVram</b> (const void *src, void *dst)</td></tr>
<tr class="separator:ga232dfc48c58f0032addeed2075bd9649"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga75da64d1aced64d06f8f94c78e15c03c"><td class="memItemLeft" align="right" valign="top"><a id="ga75da64d1aced64d06f8f94c78e15c03c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Diff16bitUnFilter</b> (const void *src, void *dst)</td></tr>
<tr class="separator:ga75da64d1aced64d06f8f94c78e15c03c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Sound Functions</h2></td></tr>
<tr class="memitem:ga2a5a0928886b148a72083c596724b1b0"><td class="memItemLeft" align="right" valign="top"><a id="ga2a5a0928886b148a72083c596724b1b0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SoundBias</b> (u32 bias)</td></tr>
<tr class="separator:ga2a5a0928886b148a72083c596724b1b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga502532cb12fbc826851de0fb4343a229"><td class="memItemLeft" align="right" valign="top"><a id="ga502532cb12fbc826851de0fb4343a229"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SoundDriverInit</b> (void *src)</td></tr>
<tr class="separator:ga502532cb12fbc826851de0fb4343a229"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga88b6436e8a3f9bb8af85b31872aa8e4f"><td class="memItemLeft" align="right" valign="top"><a id="ga88b6436e8a3f9bb8af85b31872aa8e4f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SoundDriverMode</b> (u32 mode)</td></tr>
<tr class="separator:ga88b6436e8a3f9bb8af85b31872aa8e4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga39f670f9a2b8f60d8db445bb9515774a"><td class="memItemLeft" align="right" valign="top"><a id="ga39f670f9a2b8f60d8db445bb9515774a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SoundDriverMain</b> (void)</td></tr>
<tr class="separator:ga39f670f9a2b8f60d8db445bb9515774a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabe932e3fef7ef6ce6753548d986345dc"><td class="memItemLeft" align="right" valign="top"><a id="gabe932e3fef7ef6ce6753548d986345dc"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SoundDriverVSync</b> (void)</td></tr>
<tr class="separator:gabe932e3fef7ef6ce6753548d986345dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga87d03a2616f8480ea9b52cfeddf8af68"><td class="memItemLeft" align="right" valign="top"><a id="ga87d03a2616f8480ea9b52cfeddf8af68"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SoundChannelClear</b> (void)</td></tr>
<tr class="separator:ga87d03a2616f8480ea9b52cfeddf8af68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga26219c9eae946729970cc4f07bf5cf0d"><td class="memItemLeft" align="right" valign="top"><a id="ga26219c9eae946729970cc4f07bf5cf0d"></a>
u32&#160;</td><td class="memItemRight" valign="bottom"><b>MidiKey2Freq</b> (void *wa, u8 mk, u8 fp)</td></tr>
<tr class="separator:ga26219c9eae946729970cc4f07bf5cf0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2a2f559adaf46ed6d55c15beff57cc5d"><td class="memItemLeft" align="right" valign="top"><a id="ga2a2f559adaf46ed6d55c15beff57cc5d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SoundDriverVSyncOff</b> (void)</td></tr>
<tr class="separator:ga2a2f559adaf46ed6d55c15beff57cc5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaf0a36a61151ab3329155b536e180c7f"><td class="memItemLeft" align="right" valign="top"><a id="gaaf0a36a61151ab3329155b536e180c7f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SoundDriverVSyncOn</b> (void)</td></tr>
<tr class="separator:gaaf0a36a61151ab3329155b536e180c7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Multiboot handshake</h2></td></tr>
<tr class="memitem:ga68959083fe540a25dc9439fe84ac0769"><td class="memItemLeft" align="right" valign="top"><a id="ga68959083fe540a25dc9439fe84ac0769"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>MultiBoot</b> (<a class="el" href="structMultiBootParam.htm">MultiBootParam</a> *mb, u32 mode)</td></tr>
<tr class="separator:ga68959083fe540a25dc9439fe84ac0769"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h2 class="groupheader">Function Documentation</h2>
<a id="gaf277e136b8db1934f0f1d39b0a92f15f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf277e136b8db1934f0f1d39b0a92f15f">&#9670;&nbsp;</a></span>ArcTan()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">s16 ArcTan </td>
          <td>(</td>
          <td class="paramtype">s16&#160;</td>
          <td class="paramname"><em>dydx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Arctangent of <em>dydx</em> (swi 08h) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dydx</td><td>Slope to get the arctangent of. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Arctangent of <em>dydx</em> in the range &lt;-4000h, 4000h&gt;, corresponding to  &lt;-&frac12;&pi;, &frac12;&pi;&gt; . </dd></dl>
<dl class="section note"><dt>Note</dt><dd>Said to be inaccurate near the range's limits. </dd></dl>

</div>
</div>
<a id="ga68aa0a256ec70725985b06e433dad5a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga68aa0a256ec70725985b06e433dad5a9">&#9670;&nbsp;</a></span>ArcTan2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">s16 ArcTan2 </td>
          <td>(</td>
          <td class="paramtype">s16&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Arctangent of a coordinate pair (swi 09h). </p>
<p>This is the full-circle arctan, with an angle range of [0,FFFFh]. </p>

</div>
</div>
<a id="ga1333931460fc0dcbcf167bbb95bfd20b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1333931460fc0dcbcf167bbb95bfd20b">&#9670;&nbsp;</a></span>BgAffineSet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void BgAffineSet </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="group__grpTypeSec.htm#ga80211dd9fa87a2e69e337e4e07bf6ca3">BgAffineSource</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__grpTypeSec.htm#gac73f1d4c3c88e67f3418f2c65ac3775b">BgAffineDest</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s32&#160;</td>
          <td class="paramname"><em>num</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets up a simple scale-then-rotate affine transformation (swi 0Eh). </p>
<p>Uses a single <em>ObjAffineSource</em> struct to set up an array of affine matrices (either BG or Object) with a certain transformation. The matrix created is  
<table border=0 cellpadding=4 cellspacing=0>
<tr>
  <td> s<sub>x</sub>&middot;cos(&alpha;)</td>
  <td>-s<sub>x</sub>&middot;sin(&alpha;)</td>
</tr>
<tr>
  <td> s<sub>y</sub>&middot;sin(&alpha;)</td>
  <td> s<sub>y</sub>&middot;cos(&alpha;)</td>
</tr>
</table>
 </p><pre class="fragment">\param src  Array with scale and angle information.
\param dst  Array of affine matrices, starting at a \a pa element.
\param num  Number of matrices to set.
\param offset   Offset between affine elements. Use 2 for BG and 
  8 for object matrices.
\note   Each element in \a src needs to be word aligned, which 
  devkitPro doesn't do anymore by itself.</pre> 
</div>
</div>
<a id="ga22d048e5057f684114717297ce07b20e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga22d048e5057f684114717297ce07b20e">&#9670;&nbsp;</a></span>CpuFastSet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CpuFastSet </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u32&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A fast transfer via CPU in 32 byte chunks. </p>
<p>This uses ARM's ldmia/stmia instructions to copy 8 words at a time, making it rival DMA transfers in speed. With bit 26 set it will keep the source address constant, effectively performing fills instead of copies. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">src</td><td>Source address. </td></tr>
    <tr><td class="paramname">dst</td><td>Destination address. </td></tr>
    <tr><td class="paramname">mode</td><td>Number of words to transfer, and mode bits. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Both source and destination must be word aligned; the number of copies must be a multiple of 8. </dd>
<dd>
In fill-mode (bit 26), the source is <em>still</em> an address, not a value. </dd>
<dd>
memcpy32/16 and memset32/16 basically do the same things, but safer. Use those instead. </dd></dl>

</div>
</div>
<a id="gad98b7191f0c7925506eda2c307f8329f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad98b7191f0c7925506eda2c307f8329f">&#9670;&nbsp;</a></span>CpuSet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CpuSet </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u32&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transfer via CPU in (half)word chunks. </p>
<p>The default mode is 16bit copies. With bit 24 set, it copies words; with bit 26 set it will keep the source address constant, effectively performing fills instead of copies. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">src</td><td>Source address. </td></tr>
    <tr><td class="paramname">dst</td><td>Destination address. </td></tr>
    <tr><td class="paramname">mode</td><td>Number of transfers, and mode bits. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This basically does a straightforward loop-copy, and is not particularly fast. </dd>
<dd>
In fill-mode (bit 26), the source is <em>still</em> an address, not a value. </dd></dl>

</div>
</div>
<a id="ga56e2dea01a1b14ac08f1d84b7148868e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga56e2dea01a1b14ac08f1d84b7148868e">&#9670;&nbsp;</a></span>Div()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">s32 Div </td>
          <td>(</td>
          <td class="paramtype">s32&#160;</td>
          <td class="paramname"><em>num</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s32&#160;</td>
          <td class="paramname"><em>den</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic integer division (swi 06h). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">num</td><td>Numerator. </td></tr>
    <tr><td class="paramname">den</td><td>Denominator. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><em>num</em> / <em>den</em> </dd></dl>
<dl class="section note"><dt>Note</dt><dd>div/0 results in an infinite loop. Try <code>DivSafe</code> instead </dd></dl>

<p class="reference">Referenced by <a class="el" href="group__grpVideoObj.htm#ga415d7f22a2a7f144ad50b9cfe64bb162">obj_rotscale_ex()</a>.</p>

</div>
</div>
<a id="ga901c5ca2399151687082037006e05ad1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga901c5ca2399151687082037006e05ad1">&#9670;&nbsp;</a></span>DivArm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">s32 DivArm </td>
          <td>(</td>
          <td class="paramtype">s32&#160;</td>
          <td class="paramname"><em>den</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s32&#160;</td>
          <td class="paramname"><em>num</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic integer division, but with switched arguments (swi 07h). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">num</td><td>Numerator. </td></tr>
    <tr><td class="paramname">den</td><td>Denominator. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><em>num</em> / <em>den</em> </dd></dl>
<dl class="section note"><dt>Note</dt><dd>div/0 results in an infinite loop. </dd></dl>

</div>
</div>
<a id="gab9837faa8c0cb3efdd3c2e0768d26864"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab9837faa8c0cb3efdd3c2e0768d26864">&#9670;&nbsp;</a></span>Halt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Halt </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait for the next VBlank (swi 05h). </p>
<dl class="section note"><dt>Note</dt><dd>Requires clearing of REG_IFBIOS bit 0 at the interrupt tonc's master interrupt handler does this for you. </dd></dl>

</div>
</div>
<a id="gaa43ede75af45be2a2e031e51a4ac1b36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa43ede75af45be2a2e031e51a4ac1b36">&#9670;&nbsp;</a></span>IntrWait()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IntrWait </td>
          <td>(</td>
          <td class="paramtype">u32&#160;</td>
          <td class="paramname"><em>flagClear</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u32&#160;</td>
          <td class="paramname"><em>irq</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait for the next VBlank (swi 05h). </p>
<dl class="section note"><dt>Note</dt><dd>Requires clearing of REG_IFBIOS bit 0 at the interrupt tonc's master interrupt handler does this for you. </dd></dl>

</div>
</div>
<a id="gabaf75c842ec0a6e31e5fc0fad9fe27a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabaf75c842ec0a6e31e5fc0fad9fe27a4">&#9670;&nbsp;</a></span>ObjAffineSet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ObjAffineSet </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="group__grpTypeSec.htm#gae68945366d768a5cbed2338280044461">ObjAffineSource</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s32&#160;</td>
          <td class="paramname"><em>num</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s32&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets up a simple scale-then-rotate affine transformation (swi 0Eh). </p>
<p>Uses a single <em>ObjAffineSource</em> struct to set up an array of affine matrices (either BG or Object) with a certain transformation. The matrix created is  
<table border=0 cellpadding=4 cellspacing=0>
<tr>
  <td> s<sub>x</sub>&middot;cos(&alpha;)</td>
  <td>-s<sub>x</sub>&middot;sin(&alpha;)</td>
</tr>
<tr>
  <td> s<sub>y</sub>&middot;sin(&alpha;)</td>
  <td> s<sub>y</sub>&middot;cos(&alpha;)</td>
</tr>
</table>
 </p><pre class="fragment">\param src  Array with scale and angle information.
\param dst  Array of affine matrices, starting at a \a pa element.
\param num  Number of matrices to set.
\param offset   Offset between affine elements. Use 2 for BG and 
  8 for object matrices.
\note   Each element in \a src needs to be word aligned, which 
  devkitPro doesn't do anymore by itself.</pre> 
</div>
</div>
<a id="ga76c658dc5f4332e4b034419dca518c1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga76c658dc5f4332e4b034419dca518c1c">&#9670;&nbsp;</a></span>Stop()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Stop </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait for the next VBlank (swi 05h). </p>
<dl class="section note"><dt>Note</dt><dd>Requires clearing of REG_IFBIOS bit 0 at the interrupt tonc's master interrupt handler does this for you. </dd></dl>

</div>
</div>
<a id="ga4f52a2fe7daa9c32a797a2bf0ce54b64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4f52a2fe7daa9c32a797a2bf0ce54b64">&#9670;&nbsp;</a></span>VBlankIntrWait()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void VBlankIntrWait </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait for the next VBlank (swi 05h). </p>
<dl class="section note"><dt>Note</dt><dd>Requires clearing of REG_IFBIOS bit 0 at the interrupt tonc's master interrupt handler does this for you. </dd></dl>

<p class="reference">Referenced by <a class="el" href="group__grpInput.htm#ga945f9e8cc7d946a992ae997a060fa65f">key_wait_till_hit()</a>.</p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
