<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>libtonc: tonc_core.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">libtonc
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.htm">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">tonc_core.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="tonc__memmap_8h.htm">tonc_memmap.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="tonc__memdef_8h.htm">tonc_memdef.h</a>&quot;</code><br />
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga8392caf15f889bb98a0053f1bfe39b32"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga8392caf15f889bb98a0053f1bfe39b32">countof</a>(_array)&#160;&#160;&#160;( sizeof(_array)/sizeof(_array[0]) )</td></tr>
<tr class="memdesc:ga8392caf15f889bb98a0053f1bfe39b32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of elements in an array. <br /></td></tr>
<tr class="separator:ga8392caf15f889bb98a0053f1bfe39b32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae9914db8a35414a32dcda24f9a5eb0ce"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpDma.htm#gae9914db8a35414a32dcda24f9a5eb0ce">DMA_TRANSFER</a>(_dst,  _src,  count,  ch,  mode)</td></tr>
<tr class="memdesc:gae9914db8a35414a32dcda24f9a5eb0ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">General purpose DMA transfer macro.  <a href="group__grpDma.htm#gae9914db8a35414a32dcda24f9a5eb0ce">More...</a><br /></td></tr>
<tr class="separator:gae9914db8a35414a32dcda24f9a5eb0ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70e96d72ec4186cf1db1b2497fb4bdce"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="tonc__core_8h.htm#a70e96d72ec4186cf1db1b2497fb4bdce">SND_RATE</a>(note,  oct)&#160;&#160;&#160;( 2048-(__snd_rates[note]&gt;&gt;(4+(oct))) )</td></tr>
<tr class="memdesc:a70e96d72ec4186cf1db1b2497fb4bdce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gives the period of a note for the tone-gen registers.  <a href="#a70e96d72ec4186cf1db1b2497fb4bdce">More...</a><br /></td></tr>
<tr class="separator:a70e96d72ec4186cf1db1b2497fb4bdce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga18d295a837ac71add5578860b55e5502"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><b>STR</b>(x)&#160;&#160;&#160;#x</td></tr>
<tr class="separator:ga18d295a837ac71add5578860b55e5502"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabe87b341f562fd1cf40b7672e4d759da"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#gabe87b341f562fd1cf40b7672e4d759da">XSTR</a>(x)&#160;&#160;&#160;STR(x)</td></tr>
<tr class="memdesc:gabe87b341f562fd1cf40b7672e4d759da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create text string from a literal. <br /></td></tr>
<tr class="separator:gabe87b341f562fd1cf40b7672e4d759da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Simple bit macros</div></td></tr>
<tr class="memitem:ga3a8ea58898cb58fc96013383d39f482c"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga3a8ea58898cb58fc96013383d39f482c">BIT</a>(n)&#160;&#160;&#160;( 1&lt;&lt;(n) )</td></tr>
<tr class="memdesc:ga3a8ea58898cb58fc96013383d39f482c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create value with bit <em>n</em> set. <br /></td></tr>
<tr class="separator:ga3a8ea58898cb58fc96013383d39f482c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f405ad0f48fac0de71a4fdad6302d8d"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga9f405ad0f48fac0de71a4fdad6302d8d">BIT_SHIFT</a>(a,  n)&#160;&#160;&#160;( (a)&lt;&lt;(n) )</td></tr>
<tr class="memdesc:ga9f405ad0f48fac0de71a4fdad6302d8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shift <em>a</em> by <em>n</em>. <br /></td></tr>
<tr class="separator:ga9f405ad0f48fac0de71a4fdad6302d8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga554ced246cf0ab94852054a9bfa5f45b"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga554ced246cf0ab94852054a9bfa5f45b">BIT_MASK</a>(len)&#160;&#160;&#160;( <a class="el" href="group__grpCoreBit.htm#ga3a8ea58898cb58fc96013383d39f482c">BIT</a>(len)-1 )</td></tr>
<tr class="memdesc:ga554ced246cf0ab94852054a9bfa5f45b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a bitmask <em>len</em> bits long. <br /></td></tr>
<tr class="separator:ga554ced246cf0ab94852054a9bfa5f45b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c6ae74f0307ff20ed00182feb73dd02"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga8c6ae74f0307ff20ed00182feb73dd02">BIT_SET</a>(y,  flag)&#160;&#160;&#160;( y |=  (flag) )</td></tr>
<tr class="memdesc:ga8c6ae74f0307ff20ed00182feb73dd02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the <em>flag</em> bits in <em>word</em>. <br /></td></tr>
<tr class="separator:ga8c6ae74f0307ff20ed00182feb73dd02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae76053decf05e22767fa234960673f18"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#gae76053decf05e22767fa234960673f18">BIT_CLEAR</a>(y,  flag)&#160;&#160;&#160;( y &amp;= ~(flag) )</td></tr>
<tr class="memdesc:gae76053decf05e22767fa234960673f18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the <em>flag</em> bits in <em>word</em>. <br /></td></tr>
<tr class="separator:gae76053decf05e22767fa234960673f18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga61ad99435edf7a76942a5bf92ef3e809"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga61ad99435edf7a76942a5bf92ef3e809">BIT_FLIP</a>(y,  flag)&#160;&#160;&#160;( y ^=  (flag) )</td></tr>
<tr class="memdesc:ga61ad99435edf7a76942a5bf92ef3e809"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flip the <em>flag</em> bits in <em>word</em>. <br /></td></tr>
<tr class="separator:ga61ad99435edf7a76942a5bf92ef3e809"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4267aa64d870ab4d9329570281dbcc4c"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga4267aa64d870ab4d9329570281dbcc4c">BIT_EQ</a>(y,  flag)&#160;&#160;&#160;( ((y)&amp;(flag)) == (flag) )</td></tr>
<tr class="memdesc:ga4267aa64d870ab4d9329570281dbcc4c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Test whether all the <em>flag</em> bits in <em>word</em> are set. <br /></td></tr>
<tr class="separator:ga4267aa64d870ab4d9329570281dbcc4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa9b35f56c6501bccb948b3576fadd4e5"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#gaa9b35f56c6501bccb948b3576fadd4e5">BF_MASK</a>(shift,  len)&#160;&#160;&#160;( <a class="el" href="group__grpCoreBit.htm#ga554ced246cf0ab94852054a9bfa5f45b">BIT_MASK</a>(len)&lt;&lt;(shift) )</td></tr>
<tr class="memdesc:gaa9b35f56c6501bccb948b3576fadd4e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a bitmask of length <em>len</em> starting at bit <em>shift</em>. <br /></td></tr>
<tr class="separator:gaa9b35f56c6501bccb948b3576fadd4e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga26ce0c9bb285c8fd508dfb6480ea9b88"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga26ce0c9bb285c8fd508dfb6480ea9b88">_BF_GET</a>(y,  shift,  len)&#160;&#160;&#160;( ((y)&gt;&gt;(shift))&amp;<a class="el" href="group__grpCoreBit.htm#ga554ced246cf0ab94852054a9bfa5f45b">BIT_MASK</a>(len) )</td></tr>
<tr class="memdesc:ga26ce0c9bb285c8fd508dfb6480ea9b88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve a bitfield mask of length <em>starting</em> at bit <em>shift</em> from <em>y</em>. <br /></td></tr>
<tr class="separator:ga26ce0c9bb285c8fd508dfb6480ea9b88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab2b19ad760c2dc2c13218c238f591a9a"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#gab2b19ad760c2dc2c13218c238f591a9a">_BF_PREP</a>(x,  shift,  len)&#160;&#160;&#160;( ((x)&amp;<a class="el" href="group__grpCoreBit.htm#ga554ced246cf0ab94852054a9bfa5f45b">BIT_MASK</a>(len))&lt;&lt;(shift) )</td></tr>
<tr class="memdesc:gab2b19ad760c2dc2c13218c238f591a9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare a bitmask for insertion or combining. <br /></td></tr>
<tr class="separator:gab2b19ad760c2dc2c13218c238f591a9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf7d92758a47a3738aac0c7886c3bb5e3"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#gaf7d92758a47a3738aac0c7886c3bb5e3">_BF_SET</a>(y,  x,  shift,  len)&#160;&#160;&#160;( y= ((y) &amp;~ <a class="el" href="group__grpCoreBit.htm#gaa9b35f56c6501bccb948b3576fadd4e5">BF_MASK</a>(shift, len)) | <a class="el" href="group__grpCoreBit.htm#gab2b19ad760c2dc2c13218c238f591a9a">_BF_PREP</a>(x, shift, len) )</td></tr>
<tr class="memdesc:gaf7d92758a47a3738aac0c7886c3bb5e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert a new bitfield value <em>x</em> into <em>y</em>. <br /></td></tr>
<tr class="separator:gaf7d92758a47a3738aac0c7886c3bb5e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">some EVIL bit-field operations, &gt;:)</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>These allow you to mimic bitfields with macros. Most of the bitfields in the registers have <em>foo</em>_SHIFT and <em>foo</em>_SHIFT macros indicating the mask and shift values of the bitfield named <em>foo</em> in a variable. These macros let you prepare, get and set the bitfields. </p>
</div></td></tr>
<tr class="memitem:gaab4904c3bcb2a4b3d80c64d9f9595f95"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#gaab4904c3bcb2a4b3d80c64d9f9595f95">BFN_PREP</a>(x,  name)&#160;&#160;&#160;( ((x)&lt;&lt;name##_SHIFT) &amp; name##_MASK )</td></tr>
<tr class="memdesc:gaab4904c3bcb2a4b3d80c64d9f9595f95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare a named bit-field for for insterion or combination. <br /></td></tr>
<tr class="separator:gaab4904c3bcb2a4b3d80c64d9f9595f95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf9c05f7c87a52e2321a3888957719e67"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#gaf9c05f7c87a52e2321a3888957719e67">BFN_GET</a>(y,  name)&#160;&#160;&#160;( ((y) &amp; name##_MASK)&gt;&gt;name##_SHIFT )</td></tr>
<tr class="memdesc:gaf9c05f7c87a52e2321a3888957719e67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the value of a named bitfield from <em>y</em>. Equivalent to (var=) y.name. <br /></td></tr>
<tr class="separator:gaf9c05f7c87a52e2321a3888957719e67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga932fd2ab5498eaa9999ba05a0c06e971"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga932fd2ab5498eaa9999ba05a0c06e971">BFN_SET</a>(y,  x,  name)&#160;&#160;&#160;(y = ((y)&amp;~name##_MASK) | <a class="el" href="group__grpCoreBit.htm#gaab4904c3bcb2a4b3d80c64d9f9595f95">BFN_PREP</a>(x,name) )</td></tr>
<tr class="memdesc:ga932fd2ab5498eaa9999ba05a0c06e971"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set a named bitfield in <em>y</em> to <em>x</em>. Equivalent to y.name= x. <br /></td></tr>
<tr class="separator:ga932fd2ab5498eaa9999ba05a0c06e971"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa1187bcb559c3387fce1fbc747828ddc"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#gaa1187bcb559c3387fce1fbc747828ddc">BFN_CMP</a>(y,  x,  name)&#160;&#160;&#160;( ((y)&amp;name##_MASK) == (x) )</td></tr>
<tr class="memdesc:gaa1187bcb559c3387fce1fbc747828ddc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare a named bitfield to named literal <em>x</em>. <br /></td></tr>
<tr class="separator:gaa1187bcb559c3387fce1fbc747828ddc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4dc82662aea29a805b7d76b54e8af2ec"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga4dc82662aea29a805b7d76b54e8af2ec">BFN_PREP2</a>(x,  name)&#160;&#160;&#160;( (x) &amp; name##_MASK )</td></tr>
<tr class="memdesc:ga4dc82662aea29a805b7d76b54e8af2ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Massage <em>x</em> for use in bitfield <em>name</em> with pre-shifted <em>x</em>. <br /></td></tr>
<tr class="separator:ga4dc82662aea29a805b7d76b54e8af2ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5eac618bcb48f787c94cc2ebbefbc61"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#gae5eac618bcb48f787c94cc2ebbefbc61">BFN_GET2</a>(y,  name)&#160;&#160;&#160;( (y) &amp; name##_MASK )</td></tr>
<tr class="memdesc:gae5eac618bcb48f787c94cc2ebbefbc61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the value of bitfield <em>name</em> from <em>y</em>, but don't down-shift. <br /></td></tr>
<tr class="separator:gae5eac618bcb48f787c94cc2ebbefbc61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga04c777d63f2aadbc80cc9c528a3a36a5"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga04c777d63f2aadbc80cc9c528a3a36a5">BFN_SET2</a>(y,  x,  name)&#160;&#160;&#160;( y = ((y)&amp;~name##_MASK) | <a class="el" href="group__grpCoreBit.htm#ga4dc82662aea29a805b7d76b54e8af2ec">BFN_PREP2</a>(x,name) )</td></tr>
<tr class="memdesc:ga04c777d63f2aadbc80cc9c528a3a36a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set bitfield <em>name</em> from <em>y</em> to <em>x</em> with pre-shifted <em>x</em>. <br /></td></tr>
<tr class="separator:ga04c777d63f2aadbc80cc9c528a3a36a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Inline assembly</div></td></tr>
<tr class="memitem:gacae0c1c7b28d809fe594e797fd3af1c5"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#gacae0c1c7b28d809fe594e797fd3af1c5">ASM_CMT</a>(str)&#160;&#160;&#160;asm volatile(&quot;@# &quot; str)</td></tr>
<tr class="memdesc:gacae0c1c7b28d809fe594e797fd3af1c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assembly comment. <br /></td></tr>
<tr class="separator:gacae0c1c7b28d809fe594e797fd3af1c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad803bc8599bf79ad4a80bfa53dd67d10"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#gad803bc8599bf79ad4a80bfa53dd67d10">ASM_BREAK</a>()&#160;&#160;&#160;asm volatile(&quot;\tmov\t\tr11, r11&quot;)</td></tr>
<tr class="memdesc:gad803bc8599bf79ad4a80bfa53dd67d10"><td class="mdescLeft">&#160;</td><td class="mdescRight">No$gba breakpoint. <br /></td></tr>
<tr class="separator:gad803bc8599bf79ad4a80bfa53dd67d10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga645e8c7f89ff5c9822ed9025712accfd"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#ga645e8c7f89ff5c9822ed9025712accfd">ASM_NOP</a>()&#160;&#160;&#160;asm volatile(&quot;\tnop&quot;)</td></tr>
<tr class="memdesc:ga645e8c7f89ff5c9822ed9025712accfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">No-op; wait a bit. <br /></td></tr>
<tr class="separator:ga645e8c7f89ff5c9822ed9025712accfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:aa213cd46a1ca74120d28772a4a93c5d0"><td class="memItemLeft" align="right" valign="top"><a id="aa213cd46a1ca74120d28772a4a93c5d0"></a>enum &#160;</td><td class="memItemRight" valign="bottom"><b>eSndNoteId</b> { <br />
&#160;&#160;<b>NOTE_C</b> =0, 
<b>NOTE_CIS</b>, 
<b>NOTE_D</b>, 
<b>NOTE_DIS</b>, 
<br />
&#160;&#160;<b>NOTE_E</b>, 
<b>NOTE_F</b>, 
<b>NOTE_FIS</b>, 
<b>NOTE_G</b>, 
<br />
&#160;&#160;<b>NOTE_GIS</b>, 
<b>NOTE_A</b>, 
<b>NOTE_BES</b>, 
<b>NOTE_B</b>
<br />
 }</td></tr>
<tr class="separator:aa213cd46a1ca74120d28772a4a93c5d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gad6e259844fb7a1aeefb8895a13312946"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#gad6e259844fb7a1aeefb8895a13312946">bf_get</a> (u32 y, uint shift, uint len)</td></tr>
<tr class="memdesc:gad6e259844fb7a1aeefb8895a13312946"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get <em>len</em> long bitfield from <em>y</em>, starting at <em>shift</em>.  <a href="group__grpCoreBit.htm#gad6e259844fb7a1aeefb8895a13312946">More...</a><br /></td></tr>
<tr class="separator:gad6e259844fb7a1aeefb8895a13312946"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga85036411a33d75a18555647820b32b67"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga85036411a33d75a18555647820b32b67">bf_merge</a> (u32 y, u32 x, uint shift, uint len)</td></tr>
<tr class="memdesc:ga85036411a33d75a18555647820b32b67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Merge <em>x</em> into an <em>len</em> long bitfield from <em>y</em>, starting at <em>shift</em>.  <a href="group__grpCoreBit.htm#ga85036411a33d75a18555647820b32b67">More...</a><br /></td></tr>
<tr class="separator:ga85036411a33d75a18555647820b32b67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga040c06a15e0eb895290eb638eab5cbe7"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga040c06a15e0eb895290eb638eab5cbe7">bf_clamp</a> (int x, uint len)</td></tr>
<tr class="memdesc:ga040c06a15e0eb895290eb638eab5cbe7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamp <em>to</em> within the range allowed by <em>len</em> bits. <br /></td></tr>
<tr class="separator:ga040c06a15e0eb895290eb638eab5cbe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5cb302a4e8a431b08b8b4a280886ebb3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga5cb302a4e8a431b08b8b4a280886ebb3">bit_tribool</a> (u32 flags, uint plus, uint minus)</td></tr>
<tr class="memdesc:ga5cb302a4e8a431b08b8b4a280886ebb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gives a tribool (-1, 0, or +1) depending on the state of some bits.  <a href="group__grpCoreBit.htm#ga5cb302a4e8a431b08b8b4a280886ebb3">More...</a><br /></td></tr>
<tr class="separator:ga5cb302a4e8a431b08b8b4a280886ebb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e0b242dbe5e7c56cb43177b211a022f"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreBit.htm#ga1e0b242dbe5e7c56cb43177b211a022f">ROR</a> (u32 x, uint ror)</td></tr>
<tr class="memdesc:ga1e0b242dbe5e7c56cb43177b211a022f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate bits right. Yes, this does lead to a ror instruction. <br /></td></tr>
<tr class="separator:ga1e0b242dbe5e7c56cb43177b211a022f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacdf972996a4ca01337da5c25824e5f2e"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> uint&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gacdf972996a4ca01337da5c25824e5f2e">align</a> (uint x, uint width)</td></tr>
<tr class="memdesc:gacdf972996a4ca01337da5c25824e5f2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Align <em>x</em> to the next multiple of <em>width</em>. <br /></td></tr>
<tr class="separator:gacdf972996a4ca01337da5c25824e5f2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga336e7bfa9fa94dd29a33af4e8273f0a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpDma.htm#ga336e7bfa9fa94dd29a33af4e8273f0a2">dma_cpy</a> (void *dst, const void *src, uint count, uint ch, u32 mode)</td></tr>
<tr class="memdesc:ga336e7bfa9fa94dd29a33af4e8273f0a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic DMA copy routine.  <a href="group__grpDma.htm#ga336e7bfa9fa94dd29a33af4e8273f0a2">More...</a><br /></td></tr>
<tr class="separator:ga336e7bfa9fa94dd29a33af4e8273f0a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafefeab8c6bbfc4be1df81bece4bc72cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpDma.htm#gafefeab8c6bbfc4be1df81bece4bc72cc">dma_fill</a> (void *dst, volatile u32 src, uint count, uint ch, u32 mode)</td></tr>
<tr class="memdesc:gafefeab8c6bbfc4be1df81bece4bc72cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic DMA fill routine.  <a href="group__grpDma.htm#gafefeab8c6bbfc4be1df81bece4bc72cc">More...</a><br /></td></tr>
<tr class="separator:gafefeab8c6bbfc4be1df81bece4bc72cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga82d4c3a041ffb35c8f97109d09211bed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpDma.htm#ga82d4c3a041ffb35c8f97109d09211bed">dma3_cpy</a> (void *dst, const void *src, uint size)</td></tr>
<tr class="memdesc:ga82d4c3a041ffb35c8f97109d09211bed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specific DMA copier, using channel 3, word transfers.  <a href="group__grpDma.htm#ga82d4c3a041ffb35c8f97109d09211bed">More...</a><br /></td></tr>
<tr class="separator:ga82d4c3a041ffb35c8f97109d09211bed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5c791a85ffc650e71dd0f699b1bc1b4c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpDma.htm#ga5c791a85ffc650e71dd0f699b1bc1b4c">dma3_fill</a> (void *dst, volatile u32 src, uint size)</td></tr>
<tr class="memdesc:ga5c791a85ffc650e71dd0f699b1bc1b4c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specific DMA filler, using channel 3, word transfers.  <a href="group__grpDma.htm#ga5c791a85ffc650e71dd0f699b1bc1b4c">More...</a><br /></td></tr>
<tr class="separator:ga5c791a85ffc650e71dd0f699b1bc1b4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae8cb66eb4453b22b5eb31262c19517cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpTimer.htm#gae8cb66eb4453b22b5eb31262c19517cc">profile_start</a> (void)</td></tr>
<tr class="memdesc:gae8cb66eb4453b22b5eb31262c19517cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start a profiling run.  <a href="group__grpTimer.htm#gae8cb66eb4453b22b5eb31262c19517cc">More...</a><br /></td></tr>
<tr class="separator:gae8cb66eb4453b22b5eb31262c19517cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga50861fa69ac898d296233e44810a1a6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> uint&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpTimer.htm#ga50861fa69ac898d296233e44810a1a6c">profile_stop</a> (void)</td></tr>
<tr class="memdesc:ga50861fa69ac898d296233e44810a1a6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop a profiling run and return the time since its start.  <a href="group__grpTimer.htm#ga50861fa69ac898d296233e44810a1a6c">More...</a><br /></td></tr>
<tr class="separator:ga50861fa69ac898d296233e44810a1a6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Repeated-value creators</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>These function take a hex-value and duplicate it to all fields, like 0x88 -&gt; 0x88888888. </p>
</div></td></tr>
<tr class="memitem:ga4f001c899e36a8c9472ccbe5adda2d32"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga4f001c899e36a8c9472ccbe5adda2d32">dup8</a> (u8 x)</td></tr>
<tr class="memdesc:ga4f001c899e36a8c9472ccbe5adda2d32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Duplicate a byte to form a halfword: 0x12 -&gt; 0x1212. <br /></td></tr>
<tr class="separator:ga4f001c899e36a8c9472ccbe5adda2d32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga410b282de0ebf70ef74bd1c688bb588f"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga410b282de0ebf70ef74bd1c688bb588f">dup16</a> (u16 x)</td></tr>
<tr class="memdesc:ga410b282de0ebf70ef74bd1c688bb588f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Duplicate a halfword to form a word: 0x1234 -&gt; 0x12341234. <br /></td></tr>
<tr class="separator:ga410b282de0ebf70ef74bd1c688bb588f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4b3f7f02a73f46cc3746fd7972fb286a"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga4b3f7f02a73f46cc3746fd7972fb286a">quad8</a> (u8 x)</td></tr>
<tr class="memdesc:ga4b3f7f02a73f46cc3746fd7972fb286a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quadruple a byte to form a word: 0x12 -&gt; 0x12121212. <br /></td></tr>
<tr class="separator:ga4b3f7f02a73f46cc3746fd7972fb286a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa72bc748f74c4e698ae03cb30f5d1d61"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gaa72bc748f74c4e698ae03cb30f5d1d61">octup</a> (u8 x)</td></tr>
<tr class="memdesc:gaa72bc748f74c4e698ae03cb30f5d1d61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Octuple a nybble to form a word: 0x1 -&gt; 0x11111111. <br /></td></tr>
<tr class="separator:gaa72bc748f74c4e698ae03cb30f5d1d61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Packing routines.</div></td></tr>
<tr class="memitem:gaa900c584476b80cbd9df6108c8a8d1f8"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gaa900c584476b80cbd9df6108c8a8d1f8">bytes2hword</a> (u8 b0, u8 b1)</td></tr>
<tr class="memdesc:gaa900c584476b80cbd9df6108c8a8d1f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pack 2 bytes into a word. Little-endian order. <br /></td></tr>
<tr class="separator:gaa900c584476b80cbd9df6108c8a8d1f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf46d9d06c96ba4f4bc992bf4d1af4b36"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gaf46d9d06c96ba4f4bc992bf4d1af4b36">bytes2word</a> (u8 b0, u8 b1, u8 b2, u8 b3)</td></tr>
<tr class="memdesc:gaf46d9d06c96ba4f4bc992bf4d1af4b36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pack 4 bytes into a word. Little-endian order. <br /></td></tr>
<tr class="separator:gaf46d9d06c96ba4f4bc992bf4d1af4b36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa5bc6af26ab0295d328e896d28f75dd6"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gaa5bc6af26ab0295d328e896d28f75dd6">hword2word</a> (u16 h0, u16 h1)</td></tr>
<tr class="memdesc:gaa5bc6af26ab0295d328e896d28f75dd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pack 2 bytes into a word. Little-endian order. <br /></td></tr>
<tr class="separator:gaa5bc6af26ab0295d328e896d28f75dd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Sector checking</div></td></tr>
<tr class="memitem:ga617876a8605b09a29701d11cfdf77708"><td class="memItemLeft" align="right" valign="top">u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#ga617876a8605b09a29701d11cfdf77708">octant</a> (int x, int y)</td></tr>
<tr class="memdesc:ga617876a8605b09a29701d11cfdf77708"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the octant that (<em>x</em>, <em>y</em>) is in.  <a href="group__grpCoreMisc.htm#ga617876a8605b09a29701d11cfdf77708">More...</a><br /></td></tr>
<tr class="separator:ga617876a8605b09a29701d11cfdf77708"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab78dad986ad4be897d473b8c5dd4f162"><td class="memItemLeft" align="right" valign="top">u32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#gab78dad986ad4be897d473b8c5dd4f162">octant_rot</a> (int x0, int y0)</td></tr>
<tr class="memdesc:gab78dad986ad4be897d473b8c5dd4f162"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the rotated octant that (<em>x</em>, <em>y</em>) is in.  <a href="group__grpCoreMisc.htm#gab78dad986ad4be897d473b8c5dd4f162">More...</a><br /></td></tr>
<tr class="separator:gab78dad986ad4be897d473b8c5dd4f162"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a3b64a03e752ed5aa67ab8f46401fa4eb"><td class="memItemLeft" align="right" valign="top"><a id="a3b64a03e752ed5aa67ab8f46401fa4eb"></a>
const uint&#160;</td><td class="memItemRight" valign="bottom"><b>__snd_rates</b> [12]</td></tr>
<tr class="separator:a3b64a03e752ed5aa67ab8f46401fa4eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f940986dd7be09e313b2309f171fccf"><td class="memItemLeft" align="right" valign="top"><a id="a3f940986dd7be09e313b2309f171fccf"></a>
const u8&#160;</td><td class="memItemRight" valign="bottom"><b>oam_sizes</b> [3][4][2]</td></tr>
<tr class="separator:a3f940986dd7be09e313b2309f171fccf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43928c0885eec3630d35e287d56fad32"><td class="memItemLeft" align="right" valign="top"><a id="a43928c0885eec3630d35e287d56fad32"></a>
const <a class="el" href="group__grpTypeTert.htm#gabd684ef1bcc16437414d6f59f72572ac">BG_AFFINE</a>&#160;</td><td class="memItemRight" valign="bottom"><b>bg_aff_default</b></td></tr>
<tr class="separator:a43928c0885eec3630d35e287d56fad32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dd397a8055d175c44ea34c986e6b4e9"><td class="memItemLeft" align="right" valign="top"><a id="a6dd397a8055d175c44ea34c986e6b4e9"></a>
<a class="el" href="group__grpTypeSec.htm#ga3f7d6a7047d3cc1d04a6a1e10d7fdb00">COLOR</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>vid_page</b></td></tr>
<tr class="separator:a6dd397a8055d175c44ea34c986e6b4e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04d9da793c804c34a9a9c831df4aa769"><td class="memItemLeft" align="right" valign="top"><a id="a04d9da793c804c34a9a9c831df4aa769"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>__qran_seed</b></td></tr>
<tr class="separator:a04d9da793c804c34a9a9c831df4aa769"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Copying and filling routines</h2></td></tr>
<tr class="memitem:ga38ee92b3067cfe67dfdb6e5b3f477558"><td class="memItemLeft" align="right" valign="top">
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga38ee92b3067cfe67dfdb6e5b3f477558">GRIT_CPY</a>(dst,  name)&#160;&#160;&#160;<a class="el" href="group__grpData.htm#ga369c27871d42efe1bf61ac4e9e6192c0">memcpy16</a>(dst, name, name##Len/2)</td></tr>
<tr class="memdesc:ga38ee92b3067cfe67dfdb6e5b3f477558"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simplified copier for GRIT-exported data. <br /></td></tr>
<tr class="separator:ga38ee92b3067cfe67dfdb6e5b3f477558"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga63fd89462bc41ee9a450d8dd10d4fac5"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga63fd89462bc41ee9a450d8dd10d4fac5">tonccpy</a> (void *dst, const void *src, uint size)</td></tr>
<tr class="memdesc:ga63fd89462bc41ee9a450d8dd10d4fac5"><td class="mdescLeft">&#160;</td><td class="mdescRight">VRAM-safe cpy.  <a href="group__grpData.htm#ga63fd89462bc41ee9a450d8dd10d4fac5">More...</a><br /></td></tr>
<tr class="separator:ga63fd89462bc41ee9a450d8dd10d4fac5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5cd7eab7b8539ee1cd66232e7fc6f0c6"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga5cd7eab7b8539ee1cd66232e7fc6f0c6">__toncset</a> (void *dst, u32 fill, uint size)</td></tr>
<tr class="memdesc:ga5cd7eab7b8539ee1cd66232e7fc6f0c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">VRAM-safe memset, internal routine.  <a href="group__grpData.htm#ga5cd7eab7b8539ee1cd66232e7fc6f0c6">More...</a><br /></td></tr>
<tr class="separator:ga5cd7eab7b8539ee1cd66232e7fc6f0c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68a3d6abff4194d1debbd024b3059fc3"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga68a3d6abff4194d1debbd024b3059fc3">toncset</a> (void *dst, u8 src, uint count)</td></tr>
<tr class="memdesc:ga68a3d6abff4194d1debbd024b3059fc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">VRAM-safe memset, byte version. Size in bytes. <br /></td></tr>
<tr class="separator:ga68a3d6abff4194d1debbd024b3059fc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9adcd1bdc20c1e011a067a07650436fb"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga9adcd1bdc20c1e011a067a07650436fb">toncset16</a> (void *dst, u16 src, uint count)</td></tr>
<tr class="memdesc:ga9adcd1bdc20c1e011a067a07650436fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">VRAM-safe memset, halfword version. Size in hwords. <br /></td></tr>
<tr class="separator:ga9adcd1bdc20c1e011a067a07650436fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb43466c91f6a1e8c5754a77fd3024a2"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#gadb43466c91f6a1e8c5754a77fd3024a2">toncset32</a> (void *dst, u32 src, uint count)</td></tr>
<tr class="memdesc:gadb43466c91f6a1e8c5754a77fd3024a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">VRAM-safe memset, word version. Size in words. <br /></td></tr>
<tr class="separator:gadb43466c91f6a1e8c5754a77fd3024a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0be2fee65973531d77b37fce46294cd0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga0be2fee65973531d77b37fce46294cd0">memset16</a> (void *dst, u16 hw, uint hwcount)</td></tr>
<tr class="memdesc:ga0be2fee65973531d77b37fce46294cd0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fastfill for halfwords, analogous to memset()  <a href="group__grpData.htm#ga0be2fee65973531d77b37fce46294cd0">More...</a><br /></td></tr>
<tr class="separator:ga0be2fee65973531d77b37fce46294cd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga369c27871d42efe1bf61ac4e9e6192c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga369c27871d42efe1bf61ac4e9e6192c0">memcpy16</a> (void *dst, const void *src, uint hwcount)</td></tr>
<tr class="memdesc:ga369c27871d42efe1bf61ac4e9e6192c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy for halfwords.  <a href="group__grpData.htm#ga369c27871d42efe1bf61ac4e9e6192c0">More...</a><br /></td></tr>
<tr class="separator:ga369c27871d42efe1bf61ac4e9e6192c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga79b00ab4b4cab447be9fed3b14e7fdfa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#gad95acfb589fdcfbf418e8b6a8de7a97f">IWRAM_CODE</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga79b00ab4b4cab447be9fed3b14e7fdfa">memset32</a> (void *dst, u32 wd, uint wdcount)</td></tr>
<tr class="memdesc:ga79b00ab4b4cab447be9fed3b14e7fdfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast-fill by words, analogous to memset()  <a href="group__grpData.htm#ga79b00ab4b4cab447be9fed3b14e7fdfa">More...</a><br /></td></tr>
<tr class="separator:ga79b00ab4b4cab447be9fed3b14e7fdfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5987b2da78cbae93641e818326c3b55e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#gad95acfb589fdcfbf418e8b6a8de7a97f">IWRAM_CODE</a> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpData.htm#ga5987b2da78cbae93641e818326c3b55e">memcpy32</a> (void *dst, const void *src, uint wdcount)</td></tr>
<tr class="memdesc:ga5987b2da78cbae93641e818326c3b55e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fast-copy by words.  <a href="group__grpData.htm#ga5987b2da78cbae93641e818326c3b55e">More...</a><br /></td></tr>
<tr class="separator:ga5987b2da78cbae93641e818326c3b55e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Random numbers</h2></td></tr>
<tr class="memitem:ga92bd96a03eb47ff5c4da8ce000b9ab2c"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#ga92bd96a03eb47ff5c4da8ce000b9ab2c">QRAN_SHIFT</a>&#160;&#160;&#160;15</td></tr>
<tr class="memdesc:ga92bd96a03eb47ff5c4da8ce000b9ab2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quick (and very dirty) pseudo-random number generator.  <a href="group__grpCoreMisc.htm#ga92bd96a03eb47ff5c4da8ce000b9ab2c">More...</a><br /></td></tr>
<tr class="separator:ga92bd96a03eb47ff5c4da8ce000b9ab2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga533ae259bbb9fadcd27781a1e28e3d3f"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#ga533ae259bbb9fadcd27781a1e28e3d3f">QRAN_MASK</a>&#160;&#160;&#160;((1&lt;&lt;<a class="el" href="group__grpCoreMisc.htm#ga92bd96a03eb47ff5c4da8ce000b9ab2c">QRAN_SHIFT</a>)-1)</td></tr>
<tr class="memdesc:ga533ae259bbb9fadcd27781a1e28e3d3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quick (and very dirty) pseudo-random number generator.  <a href="group__grpCoreMisc.htm#ga533ae259bbb9fadcd27781a1e28e3d3f">More...</a><br /></td></tr>
<tr class="separator:ga533ae259bbb9fadcd27781a1e28e3d3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga01e01122848af8b255c9f7f42a27833d"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#ga01e01122848af8b255c9f7f42a27833d">QRAN_MAX</a>&#160;&#160;&#160;<a class="el" href="group__grpCoreMisc.htm#ga533ae259bbb9fadcd27781a1e28e3d3f">QRAN_MASK</a></td></tr>
<tr class="memdesc:ga01e01122848af8b255c9f7f42a27833d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quick (and very dirty) pseudo-random number generator.  <a href="group__grpCoreMisc.htm#ga01e01122848af8b255c9f7f42a27833d">More...</a><br /></td></tr>
<tr class="separator:ga01e01122848af8b255c9f7f42a27833d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga429ab3e355986913d688c873437ae09b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#ga429ab3e355986913d688c873437ae09b">sqran</a> (int seed)</td></tr>
<tr class="memdesc:ga429ab3e355986913d688c873437ae09b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quick (and very dirty) pseudo-random number generator.  <a href="group__grpCoreMisc.htm#ga429ab3e355986913d688c873437ae09b">More...</a><br /></td></tr>
<tr class="separator:ga429ab3e355986913d688c873437ae09b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaeb94625161cb41d4df486e4350521e4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#gaaeb94625161cb41d4df486e4350521e4">qran</a> (void)</td></tr>
<tr class="memdesc:gaaeb94625161cb41d4df486e4350521e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quick (and very dirty) pseudo-random number generator.  <a href="group__grpCoreMisc.htm#gaaeb94625161cb41d4df486e4350521e4">More...</a><br /></td></tr>
<tr class="separator:gaaeb94625161cb41d4df486e4350521e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5effe2591b87ddbb3c93b40c7a65ede6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__grpTypeAttr.htm#ga2eb6f9e0395b47b8d5e3eeae4fe0c116">INLINE</a> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__grpCoreMisc.htm#ga5effe2591b87ddbb3c93b40c7a65ede6">qran_range</a> (int <a class="el" href="group__grpMathBase.htm#ga173c7f9d57402f3c5e320b1d95094c89">min</a>, int <a class="el" href="group__grpMathBase.htm#ga970dcb32f1b82ff8a3a5ff4496aa4e84">max</a>)</td></tr>
<tr class="memdesc:ga5effe2591b87ddbb3c93b40c7a65ede6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ranged random number.  <a href="group__grpCoreMisc.htm#ga5effe2591b87ddbb3c93b40c7a65ede6">More...</a><br /></td></tr>
<tr class="separator:ga5effe2591b87ddbb3c93b40c7a65ede6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><dl class="section author"><dt>Author</dt><dd>J Vijn </dd></dl>
<dl class="section date"><dt>Date</dt><dd>20060508 - 20080128 </dd></dl>
</div><h2 class="groupheader">Macro Definition Documentation</h2>
<a id="a70e96d72ec4186cf1db1b2497fb4bdce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70e96d72ec4186cf1db1b2497fb4bdce">&#9670;&nbsp;</a></span>SND_RATE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SND_RATE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">note, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">oct&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;( 2048-(__snd_rates[note]&gt;&gt;(4+(oct))) )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gives the period of a note for the tone-gen registers. </p>
<p>GBA sound range: 8 octaves: [-2, 5]; 8*12= 96 notes (kinda). </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">note</td><td>ID (range: [0,11&gt;). See eSndNoteId. </td></tr>
    <tr><td class="paramname">oct</td><td>octave (range [-2,4)&gt;). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
